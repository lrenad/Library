/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Library;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import java.sql.PreparedStatement;
import java.text.DateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author End-user
 */

public class Books extends javax.swing.JFrame {
     JPanel s=new JPanel();
    /*Connection con;
    Statement st;
    ResultSet rs;
     * Creates new form Books
     */
     Connection con;
     Connection con1;
          Connection con2;
          Connection con4;
          Connection con7;

    Statement st;
        Statement st7;

    PreparedStatement pst;
        PreparedStatement pst1;
                PreparedStatement pst7;
        PreparedStatement pst8;
    PreparedStatement pst2;
    ResultSet rs7;

    ResultSet rs;
    ResultSet rs4;
    Statement st4;
    ResultSet rs2;
    Statement st2;
        Statement stq;
    Statement st3;
    
        ResultSet rs3;
        ResultSet rsq;
    User user=new User();
     static String u;
//     BorrowBill b=new BorrowBill();
//     BoughtBill bought=new BoughtBill();
//     Card card=new Card();
//     CustomerView cv=new CustomerView();

    
    BoughtBillOrder bill=new BoughtBillOrder();
    public Books() {
        initComponents();
         //   blabel.setVisible(false);
          //  rlabel.setVisible(false);
         //   btext.setVisible(false);
          //  rtext.setVisible(false);
            fillcombobox();
            All_Books();
    }
          
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
      
      
              
       


    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jj = new javax.swing.JPanel();
        p = new java.awt.Panel();
        jLabel4 = new javax.swing.JLabel();
        firstcom = new javax.swing.JComboBox<>();
        secondcom = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        pay = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        totl = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        comboBox = new javax.swing.JComboBox<>();
        check = new javax.swing.JCheckBox();
        delivery = new javax.swing.JRadioButton();
        pickup = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jj.setBackground(new java.awt.Color(142, 182, 172));
        jj.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
        jj.add(p, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 510, 470));

        jLabel4.setText("Filter by:");
        jj.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 187, 65, -1));

        firstcom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Books", "Study Books", "General Books", "Author", "Price", "Section" }));
        firstcom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                firstcomItemStateChanged(evt);
            }
        });
        firstcom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstcomActionPerformed(evt);
            }
        });
        jj.add(firstcom, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 184, -1, -1));

        secondcom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                secondcomItemStateChanged(evt);
            }
        });
        secondcom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondcomActionPerformed(evt);
            }
        });
        jj.add(secondcom, new org.netbeans.lib.awtextra.AbsoluteConstraints(238, 184, -1, -1));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Library/background.jpg"))); // NOI18N
        jLabel13.setMaximumSize(new java.awt.Dimension(1962, 1080));
        jj.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 703, 149));

        jScrollPane2.setViewportView(jj);

        jPanel2.setBackground(new java.awt.Color(215, 203, 186));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Library/ccc.jpg"))); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setFocusable(false);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 180, 170));

        jButton1.setText("Add ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));
        jButton1.setBackground(new java.awt.Color(152, 175, 172));

        jButton1.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N

        jButton1.setForeground(new java.awt.Color(255, 255, 255));

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, -1, 30));
        jButton2.setBackground(new java.awt.Color(152, 175, 172));

        jButton2.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N

        jButton2.setForeground(new java.awt.Color(255, 255, 255));

        pay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Card", "Alrajhi Card", "Borrow" }));
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });
        jPanel2.add(pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 580, -1, -1));

        jLabel2.setBackground(new java.awt.Color(142, 182, 172));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 153));
        jLabel2.setText("TOTAL:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 540, -1, -1));

        jLabel3.setBackground(new java.awt.Color(142, 182, 172));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 153));
        jLabel3.setText("Choose your payment method:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 580, 207, -1));

        totl.setEditable(false);
        totl.setBackground(new java.awt.Color(204, 204, 204));
        totl.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        totl.setBorder(null);
        totl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totlActionPerformed(evt);
            }
        });
        jPanel2.add(totl, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 540, 71, -1));

        jButton3.setText("Confirm Order");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 700, 180, -1));
        jButton3.setBackground(new java.awt.Color(152, 175, 172));

        jButton3.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N

        jButton3.setForeground(new java.awt.Color(255, 255, 255));

        jButton4.setText("Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 750, -1, -1));
        jButton4.setBackground(new java.awt.Color(152, 175, 172));

        jButton4.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N

        jButton4.setForeground(new java.awt.Color(255, 255, 255));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Title", "price"
            }
        ));
        jScrollPane4.setViewportView(table);

        jPanel2.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 285, 246));

        comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxActionPerformed(evt);
            }
        });
        jPanel2.add(comboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 188, -1, -1));

        check.setText("pack it as gift");
        check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkItemStateChanged(evt);
            }
        });
        check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkActionPerformed(evt);
            }
        });
        jPanel2.add(check, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 660, -1, -1));

        buttonGroup1.add(delivery);
        delivery.setText("Delivery");
        delivery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveryActionPerformed(evt);
            }
        });
        jPanel2.add(delivery, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 620, -1, -1));

        buttonGroup1.add(pickup);
        pickup.setText("Pick up");
        jPanel2.add(pickup, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 620, -1, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Library/backk.jpg"))); // NOI18N
        jLabel8.setText("jLabel8");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -130, 380, 1300));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void firstcomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstcomActionPerformed

if(firstcom.getSelectedItem().equals("All Books")){
               All_Books();
               secondcom.removeAllItems();
          secondcom.setSelectedIndex(-1);
          secondcom.setSelectedItem(null);
          secondcom.setVisible(false);
           }
           else if(firstcom.getSelectedItem()=="Study Books"){
             secondcom.removeAllItems();
          secondcom.setSelectedIndex(-1);
          secondcom.setSelectedItem(null);
                    secondcom.setVisible(false);

          
               Study_Books();
           }
           else if(firstcom.getSelectedItem()=="General Books")
           {
                secondcom.removeAllItems();
          secondcom.setSelectedIndex(-1);
          secondcom.setSelectedItem(null);
               generalBook();
                         secondcom.setVisible(false);

           }
              else if(firstcom.getSelectedItem()=="Author")
           {

          secondcom.removeAllItems();
          
          try{
           con4=mainclass.createConnection();
           st4=con4.createStatement();
           rs4=st4.executeQuery("Select distinct Author from book_table");
           while(rs4.next()){
         secondcom.addItem(rs4.getString("Author"));}
                                         secondcom.setVisible(true);}
          catch(SQLException e){
                                             JOptionPane.showMessageDialog(null, e.getMessage());
                                         }
          finally{
              if (rs4!=null){ 
             try{rs4.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());
          }}if (st4!=null){ 
             try{st4.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());
          }}if (con4!=null){ 
             try{con4.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());
          }

           }}
//              
        }
else if (firstcom.getSelectedItem()=="Section")
        {
                      secondcom.setVisible(true);

            secondcom.removeAllItems();
          secondcom.setSelectedIndex(-1);
          secondcom.setSelectedItem(null);
          
         secondcom.addItem("Engineering");
           secondcom.addItem("CS");
          secondcom.addItem("Poetry");
          secondcom.addItem("Crime");
                secondcom.addItem("Story");
               
                SectionBook1();
                 
        }
else if(firstcom.getSelectedItem()=="Price")
{
              secondcom.setVisible(true);

           secondcom.removeAllItems();
          secondcom.setSelectedIndex(-1);
          secondcom.setSelectedItem(null);
          
         secondcom.addItem("Less than 50 SAR");
           secondcom.addItem("Less than 100 SAR");
          secondcom.addItem("Less than 200 SAR");
          
}
           }//GEN-LAST:event_firstcomActionPerformed
          
    public void BookPrice1()
          {
              try{
                String query="select * from book_table where Price BETWEEN 0 AND 50 AND quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
         
          }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
             
}
       
     public void BookPrice2()
          {
              try{
                String query="select * from book_table where Price BETWEEN 0 AND 100 AND quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                  st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
          }
      public void BookPrice3()
          {
              try{
                String query="select * from book_table where Price BETWEEN 0 AND 200 AND quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                  st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
          }
    private void All_Books(){
           
            try{
                secondcom.setVisible(false);
                String query="select * from book_table where quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
            p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
            con=mainclass.createConnection();
            st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
}
          private void Study_Books(){
              try{
                String query="select * from book_table where Type_of_book='STUDY' AND quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                  st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
          }
          public void SectionBook1()
          {
              try{
                String query="select * from book_table where Section='Engineering' AND quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                  st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
          }
          public void SectionBook2()
          {
              try{
                String query="select * from book_table where Section='CS' AND quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                  st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());
              }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
          }}
           public void SectionBook3()
          {
              try{
                String query="select * from book_table where Section='POETRY' AND quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                  st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}  
          }
                  public void SectionBook4()
          {
              try{
                String query="select * from book_table where Section='CRIME' AND quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                  st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
          }
            public void SectionBook5()
          {
              try{
                String query="select * from book_table where Section='STORY' AND quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                  st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
          }   
          
          
          public void generalBook()
          {
               try{
                String query="select * from book_table where Type_of_book='GENERAL' AND quantity<>0";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                  st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}} 
          }
          
       
          
          public void AuthorsBook(String author)
          {
               try{
                String query="select * from book_table where quantity<>0 AND Author='"+author+"'";
                p.removeAll();
                p.revalidate();
                p.repaint();
                p.setLayout(new java.awt.GridLayout(4, 4, 2, 2));
                con=mainclass.createConnection();
                  st=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rs=st.executeQuery(query);
  
            int rows=0;
            rs.last();
            rows=rs.getRow(); 
            JLabel[]books=new JLabel[rows];
            rs.beforeFirst();
            while(rs.next()){
            for(int i=0;i<1;i++){
            books[i]=new JLabel(rs.getString("Price")+" SAR",new javax.swing.ImageIcon(getClass().getResource(rs.getString("cover"))),SwingConstants.LEFT);
               books[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
               books[i].setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM); 
               books[i].setMinimumSize(new java.awt.Dimension(500, 120));
               books[i].setMaximumSize(new java.awt.Dimension(500, 120));
               books[i].setPreferredSize(new java.awt.Dimension(500, 120));
               books[i].setFont(new java.awt.Font("Verdana Pro Cond",0, 12));
               p.add(books[i]);
   
        }}}
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
          }
           
    private void secondcomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondcomActionPerformed
           if(firstcom.getSelectedItem()=="Author"){
        AuthorsBook(secondcom.getSelectedItem().toString());}
         if(secondcom.getSelectedItem()=="CS"){
             SectionBook2();
         }
         if(secondcom.getSelectedItem()=="Engineering"){
             SectionBook1();
         }
         if(secondcom.getSelectedItem()=="Crime"){
             SectionBook4();
         }
         if(secondcom.getSelectedItem()=="Story"){
             SectionBook5();
         }
         if(secondcom.getSelectedItem()=="Poetry"){
             SectionBook3();
         }
         if(secondcom.getSelectedItem()=="Less than 50 SAR"){
             BookPrice1();
         }if(secondcom.getSelectedItem()=="Less than 100 SAR"){
             BookPrice2();
         }
         if(secondcom.getSelectedItem()=="Less than 200 SAR"){
             BookPrice3();
         }
          
    }//GEN-LAST:event_secondcomActionPerformed
    public void fillcombobox(){
 try
               {
                   String sql="SELECT Title FROM book_table";
                   con=mainclass.createConnection();
                   st=con.prepareStatement(sql);
                   rs=st.executeQuery(sql);
                   while(rs.next())
                   {
                       String n=rs.getString("Title");
                       comboBox.addItem(n);
                   }
                
               }
               catch(SQLException sql )
               {
                   sql.printStackTrace();
               }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}

}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        DefaultTableModel mod = (DefaultTableModel) table.getModel();
String selectedItem = (String) comboBox.getSelectedItem();
String sql = "SELECT book_id, Title, Price FROM Book_table WHERE Book_table.Title = ?";
con=mainclass.createConnection();
try (   PreparedStatement st = con.prepareStatement(sql)) {
 
st.setString(1, selectedItem);
try (ResultSet rs = st.executeQuery()) {
while (rs.next()) {
Object[] rowData = {rs.getInt("book_id"), rs.getString("Title"), rs.getDouble("Price")};
mod.addRow(rowData);
     double total = 0;
for (int i = 0; i < table.getRowCount(); i++) {
    Object value = table.getValueAt(i, 2);
    if (value != null) {
        total += ((Double) value).doubleValue();
        totl.setText(""+total);
    }
}
}

}
} catch (SQLException e) {
        JOptionPane.showMessageDialog(null,e.getMessage());
}finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st!=null) 
             try{st.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}


        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
          if(table.getSelectedRowCount()==0 ){
      JOptionPane.showMessageDialog(null,"Please select at least one book to delete"," ",JOptionPane.ERROR_MESSAGE);
        }
        if (table.getSelectedRow() != -1) {
            // remove selected row from the model
            ((DefaultTableModel) table.getModel()).removeRow(table.getSelectedRow());
            double total = 0;
            for (int i = 0; i < table.getRowCount(); i++) {
                Object value = table.getValueAt(i, 2);
                if (value != null) {
                    total += ((Double) value).doubleValue();
                }
            }
            totl.setText(String.valueOf(total));
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void totlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totlActionPerformed

    private void payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payActionPerformed
    if(pay.getSelectedItem()=="Borrow"){
        if(table.getRowCount()>1){
        JOptionPane.showMessageDialog(null,"You are allowed to borrow one book maximum only."," ",JOptionPane.WARNING_MESSAGE);
        for (int i = table.getRowCount()-1; i >0  ; i--) {
           ((DefaultTableModel)table.getModel()).removeRow(i);
     }}}
    else if(pay.getSelectedItem()=="Card"){
            
            }
    
    }//GEN-LAST:event_payActionPerformed
  
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        if(buttonGroup1.isSelected(null)){
                JOptionPane.showMessageDialog(null,"Please select how you want to recieve your order"," ",JOptionPane.ERROR_MESSAGE);
    }
    else{
            try{
        if(table.getRowCount()>0){
        if(pay.getSelectedItem()=="Borrow"){
        borrow(u);
                this.setVisible(false);

    }
    else if(pay.getSelectedItem()=="Card"){
        bycard(u);
        Card card=new Card();
        card.setVisible(true);
        this.setVisible(false);
    }
    else if(pay.getSelectedItem()=="Alrajhi Card"){
        byalrajhi(u);
        alrajhicard card=new alrajhicard();
        card.setVisible(true);
        this.setVisible(false);
    }
    else if(pay.getSelectedItem()=="Cash"){
        cash(u);
        
    }
    else{
                JOptionPane.showMessageDialog(null,"Please select a payment method"," ",JOptionPane.ERROR_MESSAGE);

    }}
    else{
                JOptionPane.showMessageDialog(null,"Please select at least one book"," ",JOptionPane.ERROR_MESSAGE);
    }}catch(Exception e){
        JOptionPane.showMessageDialog(null,e.getMessage());}
    }
    }//GEN-LAST:event_jButton3ActionPerformed
    public void setusername(String u){
       // uu.setText(u);
       this.u=u;
        }
    public void borrow(String username){
        try{
        Random r=new Random();
        int x=r.nextInt(3000,4001);
        bill.setBillNo(x);
        String query2="select * from customer_table where Username='"+username+"'";
                System.out.println(u);

        int id=0;
        String book_id=table.getModel().getValueAt(0,0).toString();  
        String book=table.getModel().getValueAt(0,1).toString();  
        String pricee=table.getModel().getValueAt(0,2).toString();  
        con=mainclass.createConnection();
         st2=con.createStatement();
        rs=st2.executeQuery(query2);
            rs.next();
            rs.getInt("Cust_id");
            System.out.println(rs.getInt("Cust_id"));
            String queryq="select * from book_table where Book_id='"+Integer.valueOf(book_id)+"'";
        int quantity=0;
        Statement stq=con.createStatement();
        ResultSet rsq=stq.executeQuery(queryq);
            rsq.next();
            quantity=rsq.getInt("quantity")-1;
        PreparedStatement pst3=con.prepareStatement("update book_table set quantity=? where Book_id='"+Integer.valueOf(book_id)+"'");
        pst3.setInt(1, quantity);
        long millis=System.currentTimeMillis();
        java.sql.Date date=new java.sql.Date(millis);

        String query="INSERT into borrow_table(Bill_no,Book_id,Cust_id,Return_date,Borrow_date) VALUES(?,?,?,?,?)";
        
        pst=con.prepareStatement(query);
        pst.setInt(1,x);
        pst.setInt(2,Integer.valueOf(book_id));
        pst.setInt(3,rs.getInt("Cust_id"));
        pst.setString(4,null);
        pst.setString(5,date.toString());
        
        pst.executeUpdate();

        ///////
        Statement st3=con.createStatement();
        ResultSet rs3=st3.executeQuery("Select * from borrow_table");
            while(rs3.next()){
            System.out.println(rs3.getInt("Bill_no"));}

    //    int bno=bill.getBillNo();
        BorrowBill b=new BorrowBill();
        b.BorrowBill(x,book, date,totl.getText(),pricee);
        b.setVisible(true);
        this.setVisible(false);
        
        }
    catch(SQLException e){
        JOptionPane.showMessageDialog(null,e.getMessage());
    }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st2!=null) 
             try{st2.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (rsq!=null) 
             try{rsq.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (stq!=null) 
             try{stq.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (pst!=null) 
             try{pst.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (rs3!=null) 
             try{rs3.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st3!=null) 
             try{st3.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st2!=null) 
             try{st2.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con!=null) 
             try{con.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}}
    public void bycard(String username){
        try{
                    int id=0;

        Random r=new Random();
        int x=r.nextInt(3000,4001);
        String query2="select * from customer_table where Username='"+username+"'";
        con1=mainclass.createConnection();
                  st2=con1.createStatement();
        rs=st2.executeQuery(query2);
            rs.next();
            id=rs.getInt("Cust_id");

         String query="INSERT into buy_table(Cust_id,Bill_no,Price,Payment_method,purchase_date) VALUES(?,?,?,?,?)";
                 long millis=System.currentTimeMillis();

                java.sql.Date date=new java.sql.Date(millis);

        
         pst1=con1.prepareStatement(query);
        pst1.setInt(1,id);
        pst1.setInt(2,x);
         pst1.setDouble(3,Double.valueOf(totl.getText()));
        pst1.setString(4,"Card");
        pst1.setDate(5,date);
                                pst1.executeUpdate();

          

       
            
             pst2=con1.prepareStatement("INSERT into billcontents(Book_id,Bill_no) VALUES(?,?)");
            
            for (int i =0; i< table.getRowCount() ; i++) {
                //pst2.setInt(1,i+5);
                pst2.setInt(1,Integer.valueOf(table.getModel().getValueAt(i,0).toString()));
                pst2.setInt(2, x);
                pst2.executeUpdate();

     }
        String book_id=table.getModel().getValueAt(0,0).toString();  
        String book=table.getModel().getValueAt(0,1).toString();  
        String pricee=table.getModel().getValueAt(0,2).toString();
    
       
        this.setVisible(false);
        Card card=new Card();
                card.setBillNo(x,totl.getText());
        }
        
    catch(SQLException e){
        JOptionPane.showMessageDialog(null,e.getMessage());
    }finally{
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st2!=null) 
             try{st2.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (pst1!=null) 
             try{pst1.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (pst2!=null) 
             try{pst2.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con1!=null) 
             try{con1.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
        }
    public void byalrajhi(String username){
        try{
                    int id=0;

        Random r=new Random();
        int x=r.nextInt(3000,4001);
        String query2="select * from customer_table where Username='"+username+"'";
        con7=mainclass.createConnection();
                  st7=con7.createStatement();
        rs7=st7.executeQuery(query2);
            rs7.next();
            id=rs7.getInt("Cust_id");

         String query="INSERT into buy_table(Cust_id,Bill_no,Price,Payment_method,purchase_date) VALUES(?,?,?,?,?)";
                 long millis=System.currentTimeMillis();

                java.sql.Date date=new java.sql.Date(millis);

        
         pst7=con7.prepareStatement(query);
        pst7.setInt(1,id);
        pst7.setInt(2,x);
         pst7.setDouble(3,Double.valueOf(totl.getText()));
        pst7.setString(4,"Card");
        pst7.setDate(5,date);
                                pst7.executeUpdate();

          

       
            
             pst8=con7.prepareStatement("INSERT into billcontents(Book_id,Bill_no) VALUES(?,?)");
            
            for (int i =0; i< table.getRowCount() ; i++) {
                //pst2.setInt(1,i+5);
                pst8.setInt(1,Integer.valueOf(table.getModel().getValueAt(i,0).toString()));
                pst8.setInt(2, x);
                pst8.executeUpdate();

     }
        String book_id=table.getModel().getValueAt(0,0).toString();  
        String book=table.getModel().getValueAt(0,1).toString();  
        String pricee=table.getModel().getValueAt(0,2).toString();
    
       
        this.setVisible(false);
        alrajhicard card=new alrajhicard();
                card.setBillNo(x,totl.getText());
        }
        
    catch(SQLException e){
        JOptionPane.showMessageDialog(null,e.getMessage());
    }finally{
         if (rs7!=null) 
             try{rs7.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (st7!=null) 
             try{st7.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (pst7!=null) 
             try{pst7.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (pst8!=null) 
             try{pst8.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}
         if (con7!=null) 
             try{con7.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());}}
        }
    public void cash(String username){
        try{
        Random r=new Random();
        int x=r.nextInt(3000,4001);
        String query2="select * from customer_table where Username='"+username+"'";
        con2=mainclass.createConnection();
                  st2=con2.createStatement();
        rs=st2.executeQuery(query2);
            rs.next();
            rs.getInt("Cust_id");

        int id=0;
         String query="INSERT into buy_table(Cust_id,Bill_no,Price,Payment_method,purchase_date) VALUES(?,?,?,?,?)";
                 long millis=System.currentTimeMillis();

                java.sql.Date date=new java.sql.Date(millis);

        
        PreparedStatement pst1=con2.prepareStatement(query);
        pst1.setInt(1,rs.getInt("Cust_id"));
        pst1.setInt(2,x);
        pst1.setDouble(3,Double.valueOf(totl.getText()));
        pst1.setString(4,"Cash");
        pst1.setDate(5,date);
                                pst1.executeUpdate();

          

       
            
             pst2=con2.prepareStatement("INSERT into billcontents(Book_id,Bill_no) VALUES(?,?)");
            
            for (int i =0; i< table.getRowCount() ; i++) {
                //pst2.setInt(1,i+5);
                pst2.setInt(1,Integer.valueOf(table.getModel().getValueAt(i,0).toString()));
                pst2.setInt(2, x);
                pst2.executeUpdate();

     }
        String book_id=table.getModel().getValueAt(0,0).toString();  
        String book=table.getModel().getValueAt(0,1).toString();  
        String pricee=table.getModel().getValueAt(0,2).toString();
    
       
        this.setVisible(false);
        BoughtBill bought=new BoughtBill();
        bought.BoughtBill(x);
        bought.setVisible(true);
                }
    catch(SQLException e){
        JOptionPane.showMessageDialog(null,e.getMessage());
    }finally{
         if (pst1!=null) 
             try{pst1.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());
                                         e.printStackTrace();
}
         if (rs!=null) 
             try{rs.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());
                                         e.printStackTrace();
}
         if (st2!=null) 
             try{st2.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());
                                         e.printStackTrace();
}
         if (pst2!=null) 
             try{pst2.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());                            e.printStackTrace();

             }
         if (con2!=null) 
             try{con2.close();
             }catch(SQLException e){
                            JOptionPane.showMessageDialog(null, e.getMessage());
                            e.printStackTrace();
             }}}
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        CustomerView cv=new CustomerView();
        cv.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void deliveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveryActionPerformed
        // TODO add your handling code here
        if(delivery.isSelected()){
            map map=new map();
            map.setVisible(true);
            map.setDefaultCloseOperation(HIDE_ON_CLOSE);
        }
    }//GEN-LAST:event_deliveryActionPerformed

    private void firstcomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_firstcomItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_firstcomItemStateChanged

    private void secondcomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_secondcomItemStateChanged
        // TODO add your handling code here:
          
    }//GEN-LAST:event_secondcomItemStateChanged

    private void comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxActionPerformed

    private void checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkActionPerformed

    private void checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkItemStateChanged
        // TODO add your handling code here:
        if(check.isSelected()){
        gift gift=new gift();
        gift.setVisible(true);
    }
    }//GEN-LAST:event_checkItemStateChanged
                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Books().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox check;
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JRadioButton delivery;
    private javax.swing.JComboBox<String> firstcom;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel jj;
    private java.awt.Panel p;
    private javax.swing.JComboBox<String> pay;
    private javax.swing.JRadioButton pickup;
    private javax.swing.JComboBox<String> secondcom;
    private javax.swing.JTable table;
    private javax.swing.JTextField totl;
    // End of variables declaration//GEN-END:variables
}
